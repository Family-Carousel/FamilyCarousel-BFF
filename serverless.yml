service: familycarousel-bff

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-2
  profile: ${opt:profile, 'default'}
  memorySize: 1280
  logRetentionInDays: 3
  stage: ${opt:stage, 'dev'}
  apiKeys: 
    - FamilyCarousel-BFF-${self:provider.stage}
  usagePlan:
    quota:
      limit: 1000
      period: DAY
    throttle:
      burstLimit: 1000
      rateLimit: 1000
  environment:
    NODE_ENV: ${self:provider.stage}
    AWS_PROFILE: ${self:provider.profile}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:*"
      Resource: "*"

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: false
    packager: 'yarn'
  serverless-offline:
    host: 0.0.0.0
  FamilyCarouselDomainMap:
    dev: bff.familycarousel.com
    prod: bff.familycarousel.com
  FamilyCarouselCertMap:
    dev: '*.familycarousel.com'
    prod: '*.familycarousel.com'
  customDomain:
    domainName: ${self:custom.FamilyCarouselDomainMap.${self:provider.stage}}
    certificateName: ${self:custom.FamilyCarouselCertMap.${self:provider.stage}}
    createRoute53Record: true
    endpointType: 'regional'

package: 
  individiually: true
  excludeDevDependencies: true

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-domain-manager
  - serverless-plugin-optimize

functions:
  graphql:
    name: FamilyCarousel-bff-${self:provider.stage}
    handler: handlers/handler.graphql
    description: Lambda for family carousel graphql service
    optimize: false
    events:
    - http:
        path: /graphql
        method: post
        cors: true
        authorizer: aws_iam
        private: true
    - http:
        path: /graphql
        method: get
        cors: true
        authorizer: aws_iam
        private: true

resources:
  Resources:
    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: family_carousel_backend_user_pool
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: family_carousel_backend_client
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: family_carousel_backend_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"